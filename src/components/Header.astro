---
import HeaderLink from "./HeaderLink.astro";
import Logo from "./Logo.astro";
import { SITE_TITLE } from "../consts";
---

<header>
  <nav>
    <div class="header-nav">
      <div class="logo-container">
        <Logo />
        <h2><a href="/">{SITE_TITLE}</a></h2>
      </div>
      <button
        class="hamburger-menu"
        aria-label="Toggle navigation menu"
        aria-expanded="false"
        aria-controls="overlay-menu"
      >
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </button>
    </div>
    <div class="navigation-links">
      <HeaderLink href="/">Home</HeaderLink>
      <HeaderLink href="/blog">Blog</HeaderLink>
      <HeaderLink href="/about">About</HeaderLink>
      <div class="social-links">
        <a href="https://twitter.com/c_z_a_p_l_a" target="_blank">
          <span class="sr-only">Follow Michal on Twitter</span>
          <svg viewBox="0 0 25 25" aria-hidden="true" width="32" height="32"
            ><path
              fill="currentColor"
              d="M13.982 10.622 20.54 3h-1.554l-5.693 6.618L8.745 3H3.5l6.876 10.007L3.5 21h1.554l6.012-6.989L15.868 21h5.245l-7.131-10.378Zm-2.128 2.474-.697-.997-5.543-7.93H8l4.474 6.4.697.996 5.815 8.318h-2.387l-4.745-6.787Z"
            ></path></svg
          >
        </a>
        <a href="https://github.com/michalczaplinski" target="_blank">
          <span class="sr-only">Go to Michal's GitHub repo</span>
          <svg viewBox="0 0 16 16" aria-hidden="true" width="32" height="32"
            ><path
              fill="currentColor"
              d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
            ></path></svg
          >
        </a>
      </div>
    </div>
  </nav>
  <div id="overlay-menu" class="overlay-menu" aria-hidden="true">
    <button class="close-menu" aria-label="Close navigation menu">
      <svg
        viewBox="0 0 24 24"
        fill="none"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="overlay-nav-links">
      <HeaderLink href="/">Home</HeaderLink>
      <HeaderLink href="/blog">Blog</HeaderLink>
      <HeaderLink href="/about">About</HeaderLink>
      <!-- Social links can also be added here if desired on mobile -->
    </div>
  </div>
</header>
<style>
  body.menu-open {
    overflow: hidden; /* Prevent body scroll when menu is open */
  }

  header {
    margin: 0;
    padding: 0 1em;
  }
  .logo-container {
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }
  h2 {
    margin: 0;
    font-size: 1em;
  }

  h2 a,
  h2 a.active {
    text-decoration: none;
  }

  .header-nav a,
  .navigation-links a {
    padding: 1em 0.5em;
    color: var(--black);
    border-bottom: 4px solid transparent;
    text-decoration: none;
  }

  .header-nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  /* Keep original navigation links for wider screens */
  .navigation-links {
    width: 5em;
    display: inline-block;
    position: fixed;
    left: 1.8em;
  }

  .navigation-links a.active {
    text-decoration: none;
  }

  .social-links,
  .social-links a {
    display: flex;
  }
  @media (max-width: 720px) {
    .social-links {
      display: none;
    }
  }

  .hamburger-menu {
    display: none; /* Hidden by default */
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5em;
  }

  .hamburger-menu svg {
    width: 24px;
    height: 24px;
  }

  @media (max-width: 1080px) {
    .hamburger-menu {
      display: block; /* Show below 1080px */
    }

    .navigation-links {
      display: none; /* Hide original links below 1080px */
    }
  }

  /* Overlay Menu Styles */
  .overlay-menu {
    position: fixed;
    top: 0;
    right: -100%; /* Start off-screen */
    width: 100%;
    height: 100%;
    background-color: white;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: right 0.3s ease-in-out;
    visibility: hidden; /* Hide accessibility */
  }

  .overlay-menu.menu-open {
    right: 0; /* Slide in */
    visibility: visible; /* Show accessibility */
  }

  .close-menu {
    position: absolute;
    top: 2em;
    right: 1.5em;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5em;
  }

  .close-menu svg {
    width: 30px; /* Make close button slightly larger */
    height: 30px;
    stroke: var(--main-color);
  }

  .overlay-nav-links {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2em; /* Increase spacing */
  }

  .overlay-nav-links > :global(a) {
    /* Target HeaderLink's 'a' tag */
    font-size: 1.8em; /* Larger font size */
    color: var(--main-color);
    text-decoration: none;
    padding: 0.5em 1em;
    border-bottom: none; /* Remove default border */
  }

  .overlay-nav-links > :global(a:hover),
  .overlay-nav-links > :global(a.active) {
    color: var(--accent); /* Example hover/active color */
    text-decoration: underline;
  }
</style>

<script>
  const hamburgerButton =
    document.querySelector<HTMLButtonElement>(".hamburger-menu");
  const closeButton = document.querySelector<HTMLButtonElement>(".close-menu");
  const overlayMenu = document.getElementById("overlay-menu");

  // Ensure overlayMenu exists before querying inside it
  if (hamburgerButton && closeButton && overlayMenu) {
    const navLinks = overlayMenu.querySelectorAll<HTMLAnchorElement>(
      ".overlay-nav-links a"
    ); // Get all links inside the overlay

    const focusableElements = [closeButton, ...Array.from(navLinks)]; // Convert NodeList to Array and ensure elements are focusable
    const firstFocusableElement = focusableElements[0] as HTMLElement; // Cast to HTMLElement
    const lastFocusableElement = focusableElements[
      focusableElements.length - 1
    ] as HTMLElement; // Cast to HTMLElement

    const openMenu = () => {
      overlayMenu.classList.add("menu-open");
      document.body.classList.add("menu-open"); // Prevent body scroll
      hamburgerButton.setAttribute("aria-expanded", "true");
      overlayMenu.setAttribute("aria-hidden", "false");
      // Delay focus slightly to allow transition to complete visually
      setTimeout(() => {
        firstFocusableElement.focus();
      }, 100); // Adjust delay if needed
    };

    const closeMenu = () => {
      overlayMenu.classList.remove("menu-open");
      document.body.classList.remove("menu-open"); // Allow body scroll
      hamburgerButton.setAttribute("aria-expanded", "false");
      overlayMenu.setAttribute("aria-hidden", "true");
      (hamburgerButton as HTMLElement).focus(); // Cast and return focus
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      // Add KeyboardEvent type
      if (
        event.key === "Escape" &&
        overlayMenu.classList.contains("menu-open")
      ) {
        closeMenu();
      }

      // Focus trapping logic
      if (event.key === "Tab" && overlayMenu.classList.contains("menu-open")) {
        if (event.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstFocusableElement) {
            lastFocusableElement.focus(); // Already cast
            event.preventDefault();
          }
        } else {
          // Tab
          if (document.activeElement === lastFocusableElement) {
            firstFocusableElement.focus(); // Already cast
            event.preventDefault();
          }
        }
      }
    };

    hamburgerButton.addEventListener("click", () => {
      const isExpanded =
        hamburgerButton.getAttribute("aria-expanded") === "true";
      if (isExpanded) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    closeButton.addEventListener("click", closeMenu);

    // Close menu if a link inside it is clicked (optional, good UX for SPAs)
    navLinks.forEach((link) => {
      link.addEventListener("click", closeMenu);
    });

    document.addEventListener("keydown", handleKeyDown);
  } else {
    console.error("Header menu elements not found.");
  }
</script>
